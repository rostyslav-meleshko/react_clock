{"version":3,"sources":["Clock.js","App.js","index.js"],"names":["Clock","state","date","Date","this","timerID","setInterval","setState","showTime","prev","name","props","console","log","clearInterval","isClockVisible","toLocaleTimeString","React","Component","App","clockName","Math","floor","random","className","type","onClick","showClock","hideClock","setRandomName","ReactDOM","render","document","getElementById"],"mappings":"uMAIaA,G,MAAb,4MACEC,MAAQ,CACNC,KAAM,IAAIC,MAFd,kEAKuB,IAAD,OAClBC,KAAKC,QAAUC,aACb,WACE,EAAKC,SAAS,CAAEL,KAAM,IAAIC,OAC1B,EAAKK,aAEP,OAXN,yCAeqBC,GAAO,IAChBC,EAASN,KAAKO,MAAdD,KAEJA,IAASD,EAAKC,MAChBE,QAAQC,IAAR,qCAA0CJ,EAAKC,KAA/C,eAA0DA,MAnBhE,6CAwBII,cAAcV,KAAKC,WAxBvB,iCA4BQD,KAAKO,MAAMI,gBACbH,QAAQC,IAAIT,KAAKH,MAAMC,KAAKc,wBA7BlC,+BAiCY,IACAD,EAAmBX,KAAKO,MAAxBI,eACAb,EAASE,KAAKH,MAAdC,KAER,OACE,oCACE,2CAEG,IACAa,EACGb,EAAKc,qBACL,WA5Cd,GAA2BC,IAAMC,YCkDlBC,E,4MAhDblB,MAAQ,CACNc,gBAAgB,EAChBK,UAAW,G,8DAIXhB,KAAKG,UAAS,iBAAO,CAAEa,UAAWC,KAAKC,MAAsB,IAAhBD,KAAKE,gB,kCAIlDnB,KAAKG,UAAS,iBAAO,CAAEQ,gBAAgB,Q,kCAIvCX,KAAKG,UAAS,iBAAO,CAAEQ,gBAAgB,Q,+BAG/B,IAAD,OACP,OACE,yBAAKS,UAAU,OACb,2CACA,kBAAC,EAAD,CACET,eAAgBX,KAAKH,MAAMc,eAC3BL,KAAMN,KAAKH,MAAMmB,YAEnB,4BACEK,KAAK,SACLC,QAAS,kBAAM,EAAKC,cAFtB,cAMA,4BACEF,KAAK,SACLC,QAAS,kBAAM,EAAKE,cAFtB,cAMA,4BACEH,KAAK,SACLC,QAAS,kBAAM,EAAKG,kBAFtB,wB,GAtCUZ,IAAMC,WCDxBY,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.f9c78f7f.chunk.js","sourcesContent":["/* eslint-disable no-console */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport class Clock extends React.Component {\n  state = {\n    date: new Date(),\n  };\n\n  componentDidMount() {\n    this.timerID = setInterval(\n      () => {\n        this.setState({ date: new Date() });\n        this.showTime();\n      },\n      1000,\n    );\n  }\n\n  componentDidUpdate(prev) {\n    const { name } = this.props;\n\n    if (name !== prev.name) {\n      console.log(`The Clock was renamed from ${prev.name} to ${name}`);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n\n  showTime() {\n    if (this.props.isClockVisible) {\n      console.log(this.state.date.toLocaleTimeString());\n    }\n  }\n\n  render() {\n    const { isClockVisible } = this.props;\n    const { date } = this.state;\n\n    return (\n      <>\n        <p>\n          Current time:\n          {' '}\n          {isClockVisible\n            ? date.toLocaleTimeString()\n            : null}\n        </p>\n      </>\n    );\n  }\n}\n\nClock.propTypes = {\n  isClockVisible: PropTypes.bool.isRequired,\n  name: PropTypes.number.isRequired,\n};\n","import React from 'react';\n\nimport './App.scss';\nimport { Clock } from './Clock';\n\nclass App extends React.Component {\n  state = {\n    isClockVisible: false,\n    clockName: 1,\n  };\n\n  setRandomName() {\n    this.setState(() => ({ clockName: Math.floor(Math.random() * 1000) }));\n  }\n\n  showClock() {\n    this.setState(() => ({ isClockVisible: true }));\n  }\n\n  hideClock() {\n    this.setState(() => ({ isClockVisible: false }));\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React clock</h1>\n        <Clock\n          isClockVisible={this.state.isClockVisible}\n          name={this.state.clockName}\n        />\n        <button\n          type=\"button\"\n          onClick={() => this.showClock()}\n        >\n          Show Clock\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => this.hideClock()}\n        >\n          Hide Clock\n        </button>\n        <button\n          type=\"button\"\n          onClick={() => this.setRandomName()}\n        >\n          Set random name\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}